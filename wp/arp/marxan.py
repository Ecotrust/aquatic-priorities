import os
from django.conf import settings
from lingcod.common.utils import get_logger
log = get_logger()

class ConservationFeature(object):
    def __init__(self, id, fieldname, penalty, target, pct, total):
        self.id = id
        self.fieldname = fieldname
        self.name = fieldname
        self.penalty = penalty
        self.target = target
        self.pct = pct
        self.total = total

    def __repr__(self):
        return "%s: target=%s (%s), penalty=%s" % (
                self.name, self.target, self.pct, self.penalty)

class MarxanError(Exception):
    pass

class MarxanAnalysis(object):

    def __init__(self, params, units, outdir, name="wp"):
        self.outdir = os.path.realpath(outdir)
        self.marxan_bin = os.path.realpath(settings.MARXAN_BIN)
        if not os.path.exists(self.marxan_bin):
            raise MarxanError("Marxan linux binary not found; tried %s" % self.marxan_bin)
        if not os.access(self.marxan_bin, os.X_OK):
            raise MarxanError("Marxan binary exists but is not executable; tried %s" % self.marxan_bin)

        self.NUMREPS = settings.MARXAN_NUMREPS
        self.NUMITNS = settings.MARXAN_NUMITNS

        self.params = params
        self.species = params.species
        self.units = units
        self.name = name

    def setup(self):
        if os.path.exists(self.outdir):
            import shutil 
            shutil.rmtree(self.outdir) 
        os.makedirs(os.path.join(self.outdir,"data"))
        os.makedirs(os.path.join(self.outdir,"output"))

        link = os.path.realpath(os.path.join(self.outdir,"marxan"))
        if not os.path.exists(link):
            os.symlink(self.marxan_bin, link)

    def write_pu(self):
        ws = self.units
        fh = open("%s/data/pu.dat" % self.outdir, 'w')
        fh.write("\t".join(["id","cost","status","xloc","yloc"]))
        for w in ws:
            fh.write("\n")
            fh.write("\t".join(str(x) for x in 
                [w.pk,w.climate_cost,0,w.geometry.centroid[0],w.geometry.centroid[1]]))
        fh.close()

    def write_puvcf(self):
        ws = self.units
        species = self.species
        fh = open("%s/data/puvcf.dat" % self.outdir, 'w')
        fh.write("amount	species	pu")
        for s in species:
            for w in ws:
                amount = w.__dict__[s.fieldname]
                if amount and amount > 0.0:
                    fh.write("\n")
                    fh.write("\t".join(str(x) for x in 
                        [w.__dict__[s.fieldname], s.id, w.pk]))
        fh.close()
        
    def write_spec(self):
        ws = self.units
        species = self.species
        fh = open("%s/data/spec.dat" % self.outdir, 'w')
        fh.write("\t".join(['id','type','target','spf','name']))
        for s in species:
            fh.write("\n")
            fh.write("\t".join(str(x) for x in 
                [s.id,0,s.target,s.penalty,s.name]))
            
        fh.close()

    def write_input(self):
        input_dat = """Input file for Annealing program.

This file generated by Marxan.py

General Parameters
VERSION 0.1
BLM  0.00000000000000E+0000
PROP  0.00000000000000E+0000
RANDSEED -1
BESTSCORE -1
NUMREPS %d

Annealing Parameters
NUMITNS %d
STARTTEMP -1.00000000000000E+0000
COOLFAC  6.00000000000000E+0000
NUMTEMP 10000

Cost Threshold
COSTTHRESH  0.00000000000000E+0000
THRESHPEN1  0.00000000000000E+0000
THRESHPEN2  0.00000000000000E+0000

Input Files
INPUTDIR data
SPECNAME spec.dat
PUNAME pu.dat
PUVSPRNAME puvcf.dat

Save Files
SCENNAME %s
SAVERUN 1
SAVEBEST 1
SAVESUMMARY 1
SAVESCEN 1
SAVETARGMET 1
SAVESUMSOLN 1
SAVELOG 1
OUTPUTDIR output

Program control.
RUNMODE 1
MISSLEVEL 0.95
CLUMPTYPE 0
VERBOSITY 3
""" % (self.NUMREPS, self.NUMITNS, self.name)

        fh = open("%s/input.dat" % self.outdir,'w')
        fh.write(input_dat)
        fh.close()


    def run(self):
        os.chdir(self.outdir)
        import subprocess
        proc = subprocess.Popen(
                ['./marxan'], 
                shell=True, 
                stdin=subprocess.PIPE, 
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
        ) 
        print str(proc.communicate()[0])[:800] + "....."

    @property 
    def best(self):
        os.chdir(self.outdir)
        fname = os.path.realpath("%s/output/%s_best.dat" % (self.outdir, self.name))
        try:
            fh = open(fname ,'r')
        except:
            log.error("Marxan output file %s was not found" % fname) 
            raise MarxanError("Error: Marxan output files could not be found") 
        pks = [int(x) for x in fh.readlines()]
        fh.close()
        return pks
