from celery.decorators import task
import os

class ConservationFeature(object):
    def __init__(self, id, fieldname, penalty, target, pct, total):
        self.id = id
        self.fieldname = fieldname
        self.name = fieldname
        self.penalty = penalty
        self.target = target
        self.pct = pct
        self.total = total

    def __repr__(self):
        return "%s : target habitat is %s, penalty is %s, target is %s of %s total" % (
                self.name, self.target, self.penalty, self.pct, self.total)

class MarxanAnalysis(object):
    from arp.models import Watershed, WatershedPrioritization

    def __init__(self, params, units):
        #TODO get these from settings
        self.outdir = os.path.realpath("/tmp/test/%s" % params.uid)
        self.exe = os.path.realpath("/home/mperry/Marxan/Marxan.exe")

        self.params = params
        self.species = params.species
        self.units = units

    def setup(self):
        if os.path.exists(self.outdir):
            import shutil 
            shutil.rmtree(self.outdir) 
        os.makedirs(os.path.join(self.outdir,"data"))
        os.makedirs(os.path.join(self.outdir,"output"))

        exelink = os.path.realpath(os.path.join(self.outdir,"Marxan.exe"))
        if not os.path.exists(exelink):
            os.symlink(self.exe, exelink)

    def write_pu(self):
        ws = self.units
        fh = open("%s/data/pu.dat" % self.outdir, 'w')
        fh.write("\t".join(["id","cost","status","xloc","yloc"]))
        for w in ws:
            fh.write("\n")
            fh.write("\t".join(str(x) for x in 
                [w.pk,w.climate_cost,0,w.geometry.centroid[0],w.geometry.centroid[1]]))
        fh.close()

    def write_puvcf(self):
        ws = self.units
        species = self.species
        fh = open("%s/data/puvcf.dat" % self.outdir, 'w')
        fh.write("amount	species	pu")
        for s in species:
            for w in ws:
                amount = w.__dict__[s.fieldname]
                if amount and amount > 0.0:
                    fh.write("\n")
                    fh.write("\t".join(str(x) for x in 
                        [w.__dict__[s.fieldname], s.id, w.pk]))
        fh.close()
        
    def write_spec(self):
        ws = self.units
        species = self.species
        fh = open("%s/data/spec.dat" % self.outdir, 'w')
        fh.write("\t".join(['id','type','target','spf','name']))
        for s in species:
            fh.write("\n")
            fh.write("\t".join(str(x) for x in 
                [s.id,0,s.target,s.penalty,s.name]))
            
        fh.close()

    def write_input(self):
        input_dat = """Input file for Annealing program.

This file generated by Inedit.exe.
written by Ian Ball and Hugh Possingham.
iball@maths.adelaide.edu.au
hpossing@maths.adelaide.edu.au

General Parameters
VERSION 0.1
BLM  0.00000000000000E+0000
PROP  0.00000000000000E+0000
RANDSEED -1
BESTSCORE  1.00000000000000E+0001
#### CONFIG
NUMREPS 10

Annealing Parameters
#### CONFIG
NUMITNS 1000000
STARTTEMP -1.00000000000000E+0000
COOLFAC  6.00000000000000E+0000
NUMTEMP 10000

Cost Threshold
COSTTHRESH  0.00000000000000E+0000
THRESHPEN1  0.00000000000000E+0000
THRESHPEN2  0.00000000000000E+0000

Input Files
INPUTDIR data
SPECNAME spec.dat
PUNAME pu.dat
PUVSPRNAME puvcf.dat

Save Files
SCENNAME test
SAVERUN 1
SAVEBEST 1
SAVESUMMARY 1
SAVESCEN 0
SAVETARGMET 0
SAVESUMSOLN 0
SAVELOG 1
SAVESNAPSTEPS 0
SAVESNAPCHANGES 0
SAVESNAPFREQUENCY 23
OUTPUTDIR output

Program control.
#CONFIG
RUNMODE 6
MISSLEVEL  1.90000000000000E+0001
ITIMPTYPE 0
HEURTYPE -1
CLUMPTYPE 0
VERBOSITY 2

"""
        fh = open("%s/input.dat" % self.outdir,'w')
        fh.write(input_dat)
        fh.close()


    def run(self):
        os.chdir(self.outdir)
        #os.system("wine Marxan.exe")

        #import popen2
        #(stdo, stdi) = popen2.popen2("wine Marxan.exe")
        #stdi.write("\n")
        #print stdo.read()

        import subprocess
        #subprocess.call(['wine Marxan.exe \n \n'], shell=True)
        proc = subprocess.Popen(
                ['wine Marxan.exe'], 
                shell=True,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
            )
        proc.communicate('\n')

    @property 
    def best(self):
        for s in self.species:
            print s
        os.chdir(self.outdir)
        pks = [int(x) for x in open("%s/output/test_best.dat" % self.outdir,'r').readlines()]
        return pks


@task
def marxan_start(m):
    print "Setting up dirs"
    m.setup()
    print "writing .dat files"
    m.write_pu()
    m.write_puvcf()
    m.write_spec()
    m.write_input()
    print "running..."
    m.run()
    return m.outdir, m.best


if __name__ == "__main__":
    from django.core.management import setup_environ
    import os
    import sys
    sys.path.append(os.path.dirname(__file__))
    import settings
    setup_environ(settings)
    #===================================#

    parameters = WatershedPrioritization.objects.latest('date_modified')
    units = Watershed.objects.all()

    m = MarxanAnalysis(parameters, units)
    print marxan_start(m)
    ## async
    #results = marxan.start(m)
    #print results 
